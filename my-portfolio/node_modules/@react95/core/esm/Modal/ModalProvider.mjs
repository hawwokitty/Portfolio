import { nanoid } from "nanoid";
import React, { useReducer, useState } from "react";
import { ModalContext } from "./ModalContext.mjs";
const windowStackReducer = (state, action) => {
  const newWindows = { ...state };
  switch (action.type) {
    case "ADD_WINDOW": {
      newWindows[action.id] = action.window;
      return newWindows;
    }
    case "REMOVE_WINDOW": {
      delete newWindows[action.id];
      return newWindows;
    }
    case "UPDATE_WINDOW": {
      newWindows[action.id] = action.window;
      return newWindows;
    }
    default:
      return state;
  }
};
const ModalProvider = ({
  children
}) => {
  const [windows, dispatch] = useReducer(windowStackReducer, {});
  const [activeWindow, setActiveWindow] = useState();
  const addWindows = (window) => {
    const id = nanoid();
    dispatch({ type: "ADD_WINDOW", id, window });
    return id;
  };
  const removeWindow = (id) => {
    dispatch({ type: "REMOVE_WINDOW", id });
  };
  const updateWindow = (id, window) => {
    dispatch({ type: "UPDATE_WINDOW", id, window });
  };
  return /* @__PURE__ */ React.createElement(
    ModalContext.Provider,
    {
      value: {
        windows,
        addWindows,
        removeWindow,
        updateWindow,
        setActiveWindow,
        activeWindow
      }
    },
    children
  );
};
export {
  ModalProvider
};
