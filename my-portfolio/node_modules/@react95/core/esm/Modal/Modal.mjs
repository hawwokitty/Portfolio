import React, { forwardRef, useContext, useState, useEffect } from "react";
import Draggable from "react-draggable";
import { Button } from "../Button/Button.mjs";
import { TitleBar } from "../TitleBar/TitleBar.mjs";
import { ModalContext } from "./ModalContext.mjs";
import { modalWrapper, menuWrapper, menuItem, content, buttonWrapper } from "./Modal.css.mjs";
import { Frame } from "../Frame/Frame.mjs";
import close from "./close.svg.mjs";
import help from "./help.svg.mjs";
const ModalRenderer = ({
  hasWindowButton: hasButton = true,
  buttons = [],
  buttonsAlignment = "flex-end",
  children,
  onClose = () => {
  },
  onHelp,
  defaultPosition = { x: 0, y: 0 },
  positionOffset,
  height,
  icon,
  menu = [],
  title,
  width,
  ...rest
}, ref) => {
  const {
    addWindows,
    removeWindow,
    updateWindow,
    setActiveWindow,
    activeWindow
  } = useContext(ModalContext);
  const [id, setId] = useState(null);
  const [menuOpened, setMenuOpened] = useState("");
  const [isActive, setIsActive] = useState(false);
  useEffect(() => {
    if (!id) {
      const newId = addWindows({ icon, title, hasButton });
      if (newId) {
        setId(newId);
        setActiveWindow(newId);
      }
    } else {
      updateWindow(id, { icon, title, hasButton });
    }
  }, [id, icon, title, hasButton]);
  useEffect(() => {
    return () => {
      if (id) {
        removeWindow(id);
      }
    };
  }, [id]);
  useEffect(() => setIsActive(id === activeWindow), [id, activeWindow]);
  return /* @__PURE__ */ React.createElement(
    Draggable,
    {
      handle: ".draggable",
      defaultPosition,
      positionOffset,
      onMouseDown: id ? () => setActiveWindow(id) : void 0
    },
    /* @__PURE__ */ React.createElement(
      Frame,
      {
        ...rest,
        width,
        height,
        className: modalWrapper({ active: isActive }),
        ref
      },
      /* @__PURE__ */ React.createElement(
        TitleBar,
        {
          active: isActive,
          icon,
          title,
          className: "draggable"
        },
        /* @__PURE__ */ React.createElement(TitleBar.OptionsBox, null, onHelp && /* @__PURE__ */ React.createElement(TitleBar.Option, null, /* @__PURE__ */ React.createElement("img", { src: help, alt: "help", onClick: onHelp })), /* @__PURE__ */ React.createElement(TitleBar.Option, { onClick: onClose }, /* @__PURE__ */ React.createElement("img", { src: close, alt: "close" })))
      ),
      menu && menu.length > 0 && /* @__PURE__ */ React.createElement("ul", { className: menuWrapper }, menu.map(({ name, list }) => {
        const active = menuOpened === name;
        return /* @__PURE__ */ React.createElement(
          "li",
          {
            key: name,
            onMouseDown: () => setMenuOpened(name),
            className: menuItem({ active })
          },
          name,
          active && list
        );
      })),
      /* @__PURE__ */ React.createElement("div", { className: content, onClick: () => setMenuOpened("") }, children),
      buttons && buttons.length > 0 && /* @__PURE__ */ React.createElement(
        Frame,
        {
          className: buttonWrapper,
          justifyContent: buttonsAlignment
        },
        buttons.map((button) => /* @__PURE__ */ React.createElement(
          Button,
          {
            key: button.value,
            onClick: button.onClick,
            value: button.value
          },
          button.value
        ))
      )
    )
  );
};
const Modal = forwardRef(ModalRenderer);
Modal.displayName = "Modal";
Modal.defaultProps = {
  icon: void 0,
  title: "Modal",
  children: null,
  defaultPosition: { x: 0, y: 0 },
  buttons: [],
  menu: [],
  width: void 0,
  height: void 0,
  onClose: () => {
  }
};
export {
  Modal
};
